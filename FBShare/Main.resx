<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAANcNAADXDQAAAAAAAAAA
        AAAAAAAAAAAAAL1xJsi9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71x
        Jv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71x
        JtAAAAAAAAAAAAAAAAAAAAAAvXEmyL1xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71x
        Jv+9cSb/vXEm871xJsK9cSfAvXEm8b1xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71x
        Jv+9cSb/vXEm0AAAAAAAAAAAAAAAAAAAAAC9cSbIvXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71x
        Jv+9cSb/vXAm3L1wJ0KZZgAFvGsoE7xrKBPMZjMFvW8lPr1xJtm9cSb/vXEm/71xJv+9cSb/vXEm/71x
        Jv+9cSb/vXEm/71xJv+9cSbQAAAAAAAAAAAAAAAAAAAAAL1xJsi9cSb/vXEm/71xJv+9cSb/vXEm/71x
        Jv+9cSb/vXEm/71xJrWxdicNu3AlKb5yJkq9cSZ4vXIncLxyJle/cyYoxHYnDb1yJq+9cSb/vXEm/71x
        Jv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJtAAAAAAAAAAAAAAAAAAAAAAvXEmyL1xJv+9cSb/vXEm/71x
        Jv+9cSb/vXEm/71xJv+9cSbsvG8hF7twJSm8cigmv3EnNL9wJTC7cSgtvm8lN7xxJiK/cCUww3gtEb1w
        JuW9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm0AAAAAAAAAAAAAAAAAAAAAC9cSbIvXEm/71x
        Jv+9cSb/vXEm/71xJv+9cSb/vXEm/75xJnG8cCQ5vXEmeMZxHAm9ciVgv3IkOL9xJzS9cCZkv4BABL1x
        Jni8cidBvnAnYr1xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSbQAAAAAAAAAAAAAAAAAAAAAL1x
        Jsi9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXAkMr1xJ7K9cSb/zGYzBb1xJt+9cSZ4vXIncL1x
        JucAAAAAvXEm+L5wJsO8cigmvXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJtAAAAAAAAAAAAAA
        AAAAAAAAvXEmyL1xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJvu/gEAEvHMkKrxvJy4AAAAAv24pLLl0
        IxbCbSQVvG8nLgAAAAC+cSQru3EoLf8AAAG9cSf1vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm0AAA
        AAAAAAAAAAAAAAAAAAC9cSbIvXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/7p2Jxq9ciaSvXEmtgAA
        AAC9ciamvnEnVrxwJlC8cSesAAAAALxxJ6y9cSeev3AgEL1xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71x
        Jv+9cSbQAAAAAAAAAAAAAAAAAAAAAL1xJsi9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vHAmUL1x
        J4O9cSbwtm0kDr1xJ8a9cidwvXInab1xJ83MZjMFvXEm771yJpK9cCdCvXEm/71xJv+9cSb/vXEm/71x
        Jv+9cSb/vXEm/71xJtAAAAAAAAAAAAAAAAAAAAAAvXEmyL1xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71x
        Jv+9cSa2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL5wJqi9cSb/vXEm/71x
        Jv+9cSb/vXEm/71xJv+9cSb/vXEm0AAAAAAAAAAAAAAAAAAAAAC9cSbIvXEm/71xJv+9cSb/vXEm/71x
        Jv+9cSb/vXEm/71xJv+9cSVhu3EoLb1xJlG9cSVovXAldL1xJmy8cSZzvHIlTL1xJja8ciZXvXEm/71x
        Jv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSbQAAAAAAAAAAAAAAAAAAAAAL1xJsi9cSb/vXEm/71x
        Jv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJvm9cSZ4qlUAA71xJhu+ciZKvHMlRb11JCOAgAACvHEmc71x
        Jve9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJtAAAAAAAAAAAAAAAAAAAAAAvXEmyL1x
        Jv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+8cSbPvnEmhb5wJVK8cCZQvXEng7xx
        Jsu9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm0AAAAAAAAAAAAAAAAAAA
        AAC9cSbIvXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71x
        Jv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSbQAAAAAAAA
        AAAAAAAAAAAAALxyJle9cidwvXIncL1yJ3C9cidwvXIncL1yJ3C9cidwvXIncL1yJ3C9cidwvXIncL1y
        J3C9cidwvXIncL1yJ3C9cidwvXIncL1yJ3C9cidwvXIncL1yJ3C9cidwvXIncL1yJ3C9cidwvXIncLxw
        J1sAAAAAAAAAAAAAAAAAAAAAvHImV71yJ3C9cidwvXIncL1yJ3C9cidwvXIncL1yJ3C9cidwvXIncL1y
        J3C9cidwvXIncL1yJ3C9cidwvXIncL1yJ3C9cidwvXIncL1yJ3C9cidwvXIncL1yJ3C9cidwvXIncL1y
        J3C9cidwvHAnWwAAAAAAAAAAAAAAAAAAAAC9cSbIvXEnxr1xJtm9cSbWvXEnxr1xJuq9cSa1vXEm/71x
        Jv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71x
        Jv+9cSb/vXEm/71xJv+9cSbQAAAAAAAAAAAAAAAAAAAAAL1xJsi8ciWCvHEnrL1yJqa8ciWCvXEm0L5y
        Jl69cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJv+9cSb/vXEm/71x
        Jv+9cSb/vXEm/71xJv+9cSb/vXEm/71xJtAAAAAAAAAAAAAAAAAAAAAAvXImr71xJuC9cSbgvXEm4L1x
        JuC9cSbgvXEm4L1xJuC9cSbgvXEm4L1xJuC9cSbgvXEm4L1xJuC9cSbgvXEm4L1xJuC9cSbgvXEm4L1x
        JuC9cSbgvXEm4L1xJuC9cSbgvXEm4L1xJuC9cSbgvXEmtgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAL9wKCC8cSdIvHEnSLxxJ0i8cSdIv3AgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAvnIlbr5xJXUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL1xJhu8cSdIvHEnSL11
        JCMAAAAAAAAAAAAAAAAAAAAAvXEm1b1xJv+9cSb5vXEm9r1xJv+8ciWdAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAC8cigmv3MmKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgIAAAr1y
        J3C9cSbtvXEm/r1xJqMAAAAAAAAAAAAAAAC9cSbSvHEmsL+AQAS5ciMdvXEm1rxyJZ0AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAvG8mNb1xJtu9cSb/vXEm/79wJTAAAAAAAAAAAAAAAAAAAAAAvXElaL5yJi8AAAAAAAAAAAAA
        AAAAAAAAv4AgCL1xJoi/gCAIAAAAAAAAAAAAAAAAvnEmarxxJnMAAAAAAAAAAAAAAAAAAAAAvXEmiL9q
        KwwAAAAAAAAAAL9tJBy+cSbivnIlicJwKRm9cSbOvXEmbAAAAAAAAAAAvXEm2b5xJb+zZhoKv20kHL1w
        Jty9cSaiAAAAAAAAAADGcRwJvnAnmMZxHAkAAAAAAAAAAAAAAAC9cSaIvXElkAAAAAAAAAAAAAAAAAAA
        AAC+cCeYtm0kDgAAAAAAAAAAu3EoLbxxJiIAAAAAAAAAAL1xJq29ciamAAAAAAAAAAC9ciXTvXEm/71x
        Jvm9cSb/vXEm/71yJpsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvXAlWb1xJvG9cSbyvXImZQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqlUAA/8AAAEAAAAAAAAAAL9t
        JBy7cChAu3AoQLtwKEC7cChAtm0kDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEdicNvXImprxx
        J6y/cCAQuXQuCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAC9cidwvXImwb1xJXy8cCahAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMN4LRG9cCa6vXEm1L1xJjYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAgA8AEIAPABCADwAAAA8Af
        +APAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAP///////////////+B/n+Hgf5/g4H/
        /8HnjnmBgY55mYH8P/mB/B////4f///+H/8=
</value>
  </data>
</root>